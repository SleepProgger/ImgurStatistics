{"version":3,"sources":["chartist-plugin-tooltips-flex.js"],"names":["root","factory","define","amd","Chartist","returnExportsGlobal","exports","module","require","this","window","document","default_tooltip_display","series","tooltip","x_vals","text","i","length","push","value","x","options","formatName","data","formatY","y","x_text","formatX","mergeXSeriesFnc","binarySearch","ar","el","compare_fn","m","n","k","cmp","defaultOptions","tooltipOffset","tooltipClass","markerClass","markerY","mergeFnc","displayFnc","highlightPoint","highlightPointClass","noop","name","toUpperCase","substr","x_values","plugins","Tooltips_flex","extend","plugin","chart","get_nearest_points","elements","point","raw_x","a","b","right","Math","max","left","update","rafQueued","_tooltip_visible","_show_tooltip","svg_pos","transformToSVG","last_event","pageX","pageY","values","points","tooltipMergeFnc","ret","textContent","height","offsetHeight","width","offsetWidth","offsetX","offsetY","style","transform","marker","getNode","setAttribute","marker_y","p","unProjectX","unProjectY","classList","add","addClass","matrix","svg","getScreenCTM","_point","createSVGPoint","matrixTransform","inverse","body","querySelector","chart_container","container","created","axis_x","axis_y","bind","merge_functions","nearest","project","abs","interpolate","ns","ls","rs","createElement","className","position","whiteSpace","top","append","addEventListener","event","remove","removeClass","requestAnimationFrame","Line","on","axisX","axisY","svgElement","tagName","ownerSVGElement","grid","grid_box","getBoundingClientRect","cont_box","top_padding","elem","x1","y1","x2","y2","left_padding","series_data","raw_x_data","series_name","j","d","classNames","bounds","range","min","axisLength","chartRect"],"mappings":"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","file":"chartist-plugin-tooltips-flex.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"chartist\"], function (Chartist) {\n      return (root.returnExportsGlobal = factory(Chartist));\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory(require(\"chartist\"));\n  } else {\n    root['Chartist.plugins.Tooltips_flex'] = factory(Chartist);\n  }\n}(this, function (Chartist) {\n\n  /**\n   * Chartist.js plugin to display a tooltip when hovering (or clickin) the chart.\n   *\n   * TODO: use position approach from zoom plugin instead of looping over points\n   * TODO: investigate performance issues with zoomed in flat data. Might be solved when switching to position apporach to translate from svg coords to view\n   */\n  /* global Chartist */\n  (function(window, document, Chartist) {\n    'use strict';\n\n    var defaultOptions = {\n      tooltipOffset: {\n        x: 0,\n        y: -15\n      },\n      tooltipClass: 'chartist-tooltip-flex',\n      markerClass: 'chartist-tooltip-flex-marker',\n      markerY: false,\n      /* Function to merge the two found nearest points.\n       * Can be one of: nearest, left, right, interpolate\n       * Or a function. See comment over merge_functions.\n       * Warning: interpolate doesn't properly work with lineSmooth: true. (TODO)\n       * */\n      mergeFnc: 'nearest',\n      /* Function to create/update the tooltip content.\n       * function fn(series, tooltip)...\n       *  series contains {name: seriesname, value: value choosen by tooltipMergeFnc} for each series in the graph.\n       *  If the return value is not null set it as textContent. tooltip can be used to update html.\n       *  this is the plguin object which provides:\n       *    options           : The option object\n       *    merge_functions   : Object containing all build in merge function\n       *    unProjectX(value) : Transforms x data value to svg position\n       *    unProjectY(value) : Transforms y data value to svg position\n       *    project(value)    : Transforms x svg position to x data value \n       */\n      displayFnc: default_tooltip_display,\n      /* Adds the tooltipHighlightPointClass to each point returned by the merge function if set. */\n      highlightPoint: true,\n      highlightPointClass: 'ct-tooltip-point-hit',\n      /* Format function for x values. Used by the default tooltipMergeFnc */\n      formatX: Chartist.noop,\n      /* Format function for y values. Used by the default tooltipMergeFnc */\n      formatY: Chartist.noop,\n      /* Format function for series names. Used by the default tooltipMergeFnc */\n      formatName: function(x){ var n=x.name; return n[0].toUpperCase() + n.substr(1) },\n      /* Format function to select which x value is shown. Parameter is an array of all x values. Used by the default tooltipMergeFnc */\n      mergeXSeriesFnc: function(x_values){ return x_values[0] }\n    };\n\n\n    /*\n     * The default display function.\n     * If the return value != null use it as textContent (!) for the tooltip.\n     * Use the tooltip parameter if you want to write/update HTML.\n     */\n    function default_tooltip_display(series, tooltip){\n      var x_vals = [];\n      var text = \"\";\n      for(var i=0; i < series.length; ++i){\n        x_vals.push(series[i].value.x);\n        text += this.options.formatName(series[i].series.data) + \": \" + this.options.formatY(series[i].value.y) + \"\\n\";\n      }\n      var x_text = this.options.formatX(this.options.mergeXSeriesFnc(x_vals));\n      if(x_text)\n        text = x_text + \"\\n\" + text;\n      return text;\n    }\n\n\n    /*\n     * \"Borrowed\" from https://stackoverflow.com/a/29018745/4830897\n     * Binary search in JavaScript.\n     * Returns the index of of the element in a sorted array or (-n-1) where n is the insertion point for the new element.\n     * Parameters:\n     *     ar - A sorted array\n     *     el - An element to search for\n     *     compare_fn - A comparator function. The function takes two arguments: (a, b) and returns:\n     *        a negative number  if a is less than b;\n     *        0 if a is equal to b;\n     *        a positive number if a is greater than b.\n     * The array may contain duplicate elements. If there are more than one equal elements in the array, \n     * the returned value can be the index of any one of the equal elements.\n     */\n    function binarySearch(ar, el, compare_fn) {\n        var m = 0;\n        var n = ar.length - 1;\n        while (m <= n) {\n            var k = (n + m) >> 1;\n            var cmp = compare_fn(el, ar[k]);\n            if (cmp > 0) {\n                m = k + 1;\n            } else if(cmp < 0) {\n                n = k - 1;\n            } else {\n                return k;\n            }\n        }\n        return m - 1;\n    }\n\n\n\n    Chartist.plugins = Chartist.plugins || {};\n    Chartist.plugins.Tooltips_flex = function(options) {\n      options = Chartist.extend({}, defaultOptions, options);\n\n      var plugin = function tooltips_flex(chart) {\n        var tooltip = document.body.querySelector(options.tooltipClass);\n        var chart_container = chart.container;\n        var svg = null;\n        var series = [];\n        var created = false;\n        var marker = null, marker_y = null;\n        var axis_x = null, axis_y = null; \n\n        options.displayFnc = options.displayFnc.bind(plugin);\n        plugin.options = options;\n\n        /* \n         * Merge functions get the two nearest points for a series and should return\n         * one point. One of left or right could be null.\n         */\n        var merge_functions = plugin.merge_functions = {\n            left: function(left, right, point){\n              if(!left) left = right;\n              return left;\n            },\n            right: function(left, right, point){\n              if(!right) right = left;\n              return right;\n            },\n            nearest: function(left, right, point){\n              if(!left) return right;\n              if(!right) return left;\n              point = project(point);\n              if(Math.abs(left.x - point) < Math.abs(right.x - point))\n                return left;\n              return right;\n            },\n            interpolate: function(left, right, point){\n              if(!left) return right;\n              if(!right) return left;\n              point = project(point);\n              var ns = (right.x - left.x);\n              var ls = Math.abs(left.x - point) / ns;\n              var rs = Math.abs(right.x - point) / ns;\n              return {\n                x: point,\n                y: right.y * ls + left.y * rs\n              }\n            },\n        }\n\n        var width = 0, height = 0;    \n        var tooltipMergeFnc = options.mergeFnc;\n        if(typeof tooltipMergeFnc !== \"function\"){\n          tooltipMergeFnc = merge_functions[tooltipMergeFnc];\n        }\n\n        if(!tooltip){\n          tooltip = document.createElement('div');\n          tooltip.className = options.tooltipClass;\n          // Fallback CSS so its at least visible without the css file.\n          tooltip.style.position = 'absolute';\n          tooltip.style.whiteSpace = 'pre';\n          tooltip.style.top = '0';\n          document.body.append(tooltip);\n        }\n\n        function get_nearest_points(elements, point){\n          var i = binarySearch(elements.raw_x, point, function(a,b){\n            if(a > b) return 1;\n            if(a < b) return -1;\n            return 0;\n          });\n          var data = elements.data.data;\n          var right = null;\n          i = Math.max(0, i);\n          var left = data[i];\n          if(i+1 < data.length){\n            right = data[i+1]\n          }\n          return [left, right];\n        }\n\n        var _tooltip_visible = false;\n        var rafQueued = false;\n        var last_event = null;\n        function update(){\n          rafQueued = false;\n          if(!_tooltip_visible) _show_tooltip();\n          var svg_pos = transformToSVG(last_event.pageX, last_event.pageY);\n          var values = [];\n          var highlightsToAdd = [];\n          for(var i=0; i < series.length; ++i){\n            var points = get_nearest_points(series[i], svg_pos.x);\n            points = tooltipMergeFnc(points[0], points[1], svg_pos.x);\n            values.push({value: points, series: series[i]});\n          }\n\n          var ret = options.displayFnc(values, tooltip);\n          if(ret){\n            tooltip.textContent = ret;          \n          }\n          height = tooltip.offsetHeight;\n          width = tooltip.offsetWidth;\n          var offsetX = - width / 2 + options.tooltipOffset.x;\n          var offsetY = - height + options.tooltipOffset.y;\n\n          /*\n          * Try to do all the dom changing at once to limit relayouts.\n          */\n          tooltip.style.transform = 'translate(' + (last_event.pageX + offsetX) + 'px, ' + (last_event.pageY + offsetY) + 'px)';\n          marker.getNode().setAttribute('transform', 'translate('+svg_pos.x+' 0)');\n          if(options.markerY){\n            marker_y.getNode().setAttribute('transform', 'translate(0 '+svg_pos.y+')');\n          }\n          if(options.highlightPoint){\n            for(var i=0; i < values.length; ++i){\n              var p = values[i].value;\n              values[i].series.point.getNode().setAttribute('transform', 'translate('+unProjectX(p.x)+' '+unProjectY(p.y)+')');\n            }\n          }\n        }\n\n\n\n        function _show_tooltip(){\n          tooltip.classList.add('tooltip-show');\n          marker.addClass('tooltip-show');\n          if(options.markerY){\n            marker_y.addClass('tooltip-show');\n          }\n          _tooltip_visible = true;\n        }\n        chart_container.addEventListener('mouseenter', function (event) {\n          _show_tooltip();\n        });\n\n        chart_container.addEventListener('mouseleave', function (event) {\n          tooltip.classList.remove('tooltip-show');\n          marker.removeClass('tooltip-show');\n          if(options.markerY){\n            marker_y.removeClass('tooltip-show');\n          }\n        });\n\n        chart_container.addEventListener('mousemove', function (event) {\n          if(!created) return;\n          last_event = event;\n          // Not really sure the requstAnimationFrame stuff is helping here.\n          // It might on slow devices\n          if(rafQueued){\n            return;\n          }\n          rafQueued = true;\n          requestAnimationFrame(update);\n        });\n\n\n        if (chart instanceof Chartist.Line) {\n          chart.on('created', function(data) {\n            //console.log(\"DATA:\", data);\n            axis_x = data.axisX;\n            axis_y = data.axisY;\n            var svgElement = chart.svg.getNode();\n            svg = svgElement.tagName === 'svg' ? svgElement : svgElement.ownerSVGElement;\n\n            // TODO: there is prob. a nicer function inside chartist already for this.\n            // TODO: investigate and get rid of grid requirement.\n            var grid = chart.svg.querySelector('.ct-grids');\n            var grid_box = grid.getNode().getBoundingClientRect();\n            var cont_box = chart.container.getBoundingClientRect();\n            var top_padding = grid_box.top - cont_box.top;\n            marker = chart.svg.elem('line', {x1: 0, y1: top_padding, x2: 0, y2: grid_box.height + top_padding, style: options.markerClass}, options.markerClass );\n            if(options.markerY){            \n              var left_padding = grid_box.left - cont_box.left;\n              marker_y = chart.svg.elem('line', {x1: left_padding, y1: 0, x2: grid_box.width + left_padding, y2: 0, style: options.markerClass}, options.markerClass );\n            }\n\n            series = [];\n            var series_data = chart.data.series;\n            for(var i=0; i < series_data.length; ++i){\n              var data = [];\n              var raw_x_data = [];\n              var series_name = series_data[i].className ? \".\"+series_data[i].className : '[*|series-name=\"'+series_data[i].name+'\"]';\n              var elem = chart.svg.querySelector(series_name);\n              for(var j=0; j < series_data[i].data.length; ++j){\n                raw_x_data.push(unProjectX(series_data[i].data[j].x, axis_x));\n              }            \n              var d = {data: series_data[i], raw_x: raw_x_data, svg: elem};\n              if(options.highlightPoint){\n                d.point = elem.elem('line', {x1: 0, y1: 0, x2: 0.01, y2: 0}, chart.options.classNames.point + ' ' + options.highlightPointClass);\n              }\n              series.push(d);\n              //console.log(\"series:\", d);\n            }\n            created = true;\n          });\n        }\n\n        /*\n         * Transforms screen coordinates into svg coordinates \n         */\n        var _point = null;\n        function transformToSVG(x, y) {\n          var matrix = svg.getScreenCTM();\n          var point = _point || svg.createSVGPoint();\n          point.x = x;\n          point.y = y;\n          point = point.matrixTransform(matrix.inverse());\n          return point || { x: 0, y: 0 };\n        }\n\n        /*\n         * Transforms x data value to svg position. \n         */\n        var unProjectX = plugin.unProjectX = function (value) {\n          var bounds = axis_x.bounds || axis_x.range;\n          var max = bounds.max;\n          var min = bounds.min;\n          var range = bounds.range || (max - min);\n          return (axis_x.axisLength / range) * (value - min) + axis_x.chartRect.x1;\n        }\n\n        /*\n         * Transforms y data value to svg position. \n         */\n        var unProjectY = plugin.unProjectY = function(value) {\n          var bounds = axis_y.bounds || axis_y.range;\n          var max = bounds.max;\n          var min = bounds.min;\n          var range = bounds.range || (max - min);\n          return axis_y.chartRect.y1 - (axis_y.axisLength / range) * (value - min);\n        }\n\n        /*\n         * Transforms x svg position to x data value.. \n         */\n        var project = plugin.project = function(value) {\n          var bounds = axis_x.bounds || axis_x.range;\n          var max = bounds.max;\n          var min = bounds.min;\n          var range = bounds.range || (max - min);\n          return ((value - axis_x.chartRect.x1) * range / axis_x.axisLength) + min;\n        }\n\n\n      };\n      return plugin;\n    };\n  }(window, document, Chartist));\n\n  return Chartist.plugins.Tooltips_flex;\n\n}));\n"]}